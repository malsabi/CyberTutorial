// <auto-generated />
using CyberTutorial.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CyberTutorial.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221107233905_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnswerQuestion", b =>
                {
                    b.Property<string>("AnswersAnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionsQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnswersAnswerId", "QuestionsQuestionId");

                    b.HasIndex("QuestionsQuestionId");

                    b.ToTable("AnswerQuestion");
                });

            modelBuilder.Entity("CourseEmployee", b =>
                {
                    b.Property<string>("CoursesCourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeesEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesCourseId", "EmployeesEmployeeId");

                    b.HasIndex("EmployeesEmployeeId");

                    b.ToTable("CourseEmployee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Administrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Answer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Attempt", b =>
                {
                    b.Property<string>("AttemptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompletedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("StartedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int>("TotalIncorectAnswers")
                        .HasColumnType("int");

                    b.HasKey("AttemptId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("QuizId");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerEmiratesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.CompanySession", b =>
                {
                    b.Property<string>("CompanySessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TimeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanySessionId");

                    b.ToTable("CompanySessions");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = "8d120fe5-8a99-46aa-aa83-5b94abee2588",
                            CourseDescription = "A collection of procedures and technology designed to address external and internal threats to business security.",
                            CourseImage = "",
                            CourseName = "Cloud Security",
                            CourseUrl = ""
                        },
                        new
                        {
                            CourseId = "ff205a5e-eb22-4546-9b1d-fafa135d2016",
                            CourseDescription = "A document that you should ideally give to each employee upon hiring. Prospective employees should read the policy, sign it, and date it before they start work.",
                            CourseImage = "",
                            CourseName = "Email And Internet Usage Policy",
                            CourseUrl = ""
                        },
                        new
                        {
                            CourseId = "1b815c48-5efb-431d-91f7-00503a1840f0",
                            CourseDescription = "You'll learn about mobile security vulnerabilities and threats in this in-depth exploration of mobile security in the company.",
                            CourseImage = "",
                            CourseName = "Mobile Device Security",
                            CourseUrl = ""
                        },
                        new
                        {
                            CourseId = "fefa17f7-8069-435b-8501-daddcc217311",
                            CourseDescription = "Fake communications that appear to come froma trusted source, but these communications can put all kinds of your data at risk.",
                            CourseImage = "",
                            CourseName = "Phishing Attacks",
                            CourseUrl = ""
                        },
                        new
                        {
                            CourseId = "6e6270c4-8957-467c-8a9a-8ba292477d0e",
                            CourseDescription = "describes measures designed to ensure the physical protection of IT assets such as facilities, equipment and other property from damage and unauthorized physical access.",
                            CourseImage = "",
                            CourseName = "Physical Security",
                            CourseUrl = ""
                        },
                        new
                        {
                            CourseId = "c74959d1-c206-4465-a221-ee1cbc0e2b10",
                            CourseDescription = "Found in popular public places like airports, coffee shops, malls, restaurants, and hotels and it allows you to access the internet for free.",
                            CourseImage = "",
                            CourseName = "Public Wi-Fi",
                            CourseUrl = ""
                        },
                        new
                        {
                            CourseId = "c09572c5-7524-450a-9be3-bc2707b4bdbb",
                            CourseDescription = "A manipulation technique that exploits human error to gain private information, access, or valuables.",
                            CourseImage = "",
                            CourseName = "Social Engineering",
                            CourseUrl = ""
                        });
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentSize")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeDashboard", b =>
                {
                    b.Property<string>("EmployeeDashboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalCourses")
                        .HasColumnType("int");

                    b.Property<string>("TotalCoursesLastModified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalFailed")
                        .HasColumnType("int");

                    b.Property<string>("TotalFailedLastModified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPassed")
                        .HasColumnType("int");

                    b.Property<string>("TotalPassedLastModified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuizzes")
                        .HasColumnType("int");

                    b.Property<string>("TotalQuizzesLastModified")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeDashboardId");

                    b.ToTable("EmployeeDashboards");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeSession", b =>
                {
                    b.Property<string>("EmployeeSessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TimeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeSessionId");

                    b.ToTable("EmployeeSessions");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Quiz", b =>
                {
                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumScore")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.TopEmployee", b =>
                {
                    b.Property<string>("TopEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AverageScore")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuizzes")
                        .HasColumnType("int");

                    b.HasKey("TopEmployeeId");

                    b.ToTable("TopEmployees");
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.Property<string>("QuestionsQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizzesQuizId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionsQuestionId", "QuizzesQuizId");

                    b.HasIndex("QuizzesQuizId");

                    b.ToTable("QuestionQuiz");
                });

            modelBuilder.Entity("AnswerQuestion", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseEmployee", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Attempt", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", "Employee")
                        .WithMany("Attempts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Attempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.CompanySession", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Company", "Company")
                        .WithOne("Session")
                        .HasForeignKey("CyberTutorial.Domain.Entities.CompanySession", "CompanySessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeDashboard", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", "Employee")
                        .WithOne("EmployeeDashboard")
                        .HasForeignKey("CyberTutorial.Domain.Entities.EmployeeDashboard", "EmployeeDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeSession", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", "Employee")
                        .WithOne("Session")
                        .HasForeignKey("CyberTutorial.Domain.Entities.EmployeeSession", "EmployeeSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.TopEmployee", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", "Employee")
                        .WithOne("TopEmployee")
                        .HasForeignKey("CyberTutorial.Domain.Entities.TopEmployee", "TopEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Course", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("EmployeeDashboard");

                    b.Navigation("Session");

                    b.Navigation("TopEmployee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Attempts");
                });
#pragma warning restore 612, 618
        }
    }
}
