// <auto-generated />
using CyberTutorial.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CyberTutorial.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221022130212_001")]
    partial class _001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AnswerQuestion", b =>
                {
                    b.Property<string>("AnswersAnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionsQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnswersAnswerId", "QuestionsQuestionId");

                    b.HasIndex("QuestionsQuestionId");

                    b.ToTable("AnswerQuestion");
                });

            modelBuilder.Entity("CourseEmployee", b =>
                {
                    b.Property<string>("CoursesCourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeesEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesCourseId", "EmployeesEmployeeId");

                    b.HasIndex("EmployeesEmployeeId");

                    b.ToTable("CourseEmployee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Administrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Answer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerEmiratesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.CompanySession", b =>
                {
                    b.Property<string>("CompanySessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TimeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanySessionId");

                    b.ToTable("CompanySessions");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDashboardId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeDashboard", b =>
                {
                    b.Property<string>("EmployeeDashboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalCourses")
                        .HasColumnType("int");

                    b.Property<int>("TotalFailed")
                        .HasColumnType("int");

                    b.Property<int>("TotalPassed")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuizzes")
                        .HasColumnType("int");

                    b.HasKey("EmployeeDashboardId");

                    b.ToTable("EmployeeDashboards");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeSession", b =>
                {
                    b.Property<string>("EmployeeSessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TimeCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeSessionId");

                    b.ToTable("EmployeeSessions");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Quiz", b =>
                {
                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumScore")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.TopEmployee", b =>
                {
                    b.Property<string>("TopEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AverageScore")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuizzes")
                        .HasColumnType("int");

                    b.HasKey("TopEmployeeId");

                    b.ToTable("TopEmployee");
                });

            modelBuilder.Entity("EmployeeQuiz", b =>
                {
                    b.Property<string>("EmployeesEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizzesQuizId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeesEmployeeId", "QuizzesQuizId");

                    b.HasIndex("QuizzesQuizId");

                    b.ToTable("EmployeeQuiz");
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.Property<string>("QuestionsQuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizzesQuizId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionsQuestionId", "QuizzesQuizId");

                    b.HasIndex("QuizzesQuizId");

                    b.ToTable("QuestionQuiz");
                });

            modelBuilder.Entity("AnswerQuestion", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseEmployee", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.CompanySession", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Company", "Company")
                        .WithOne("Session")
                        .HasForeignKey("CyberTutorial.Domain.Entities.CompanySession", "CompanySessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeDashboard", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", "Employee")
                        .WithOne("EmployeeDashboard")
                        .HasForeignKey("CyberTutorial.Domain.Entities.EmployeeDashboard", "EmployeeDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeSession", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", "Employee")
                        .WithOne("Session")
                        .HasForeignKey("CyberTutorial.Domain.Entities.EmployeeSession", "EmployeeSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Course", "Course")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.TopEmployee", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.EmployeeDashboard", "EmployeeDashboard")
                        .WithMany("TopEmployees")
                        .HasForeignKey("TopEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeDashboard");
                });

            modelBuilder.Entity("EmployeeQuiz", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.HasOne("CyberTutorial.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyberTutorial.Domain.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Course", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeDashboard");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("CyberTutorial.Domain.Entities.EmployeeDashboard", b =>
                {
                    b.Navigation("TopEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
